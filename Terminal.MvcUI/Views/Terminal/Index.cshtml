@model Terminal.MvcUI.ViewModels.TerminalViewModel
@using Terminal.Core.Utilities;
@using Terminal.Core.Enums;
@using System.Configuration;
@{
    ViewBag.Title = Model.Title;
}
<script type="text/javascript">
    var rootPath = '@Url.Content("~")',
        username = '@User.Identity.Name';

    soundManager.url = rootPath + 'Content/SoundManager2/';
    //soundManager.useHTML5Audio = true;
    soundManager.allowScriptAccess = 'always';
    $(function () {
        @if (DateTime.Now.Month == (int)Month.October)
        {
            <text>
                soundManager.onready(function () {
                    soundManager.createSound({
                        id: 'halloween',
                        url: rootPath + 'Content/sounds/TheDarkeningGround.mp3',
                        autoLoad: true,
                        autoPlay: true,
                        stream: true,
                        volume: 75
                    });
                });
                Setup(rootPath + 'Content/sounds/typewriter.mp3');
                StopButton('halloween');
            </text>
        }
        else if (DateTime.Now.Month == (int)Month.December)
        {
            <text>
                soundManager.onready(function () {
                    soundManager.createSound({
                        id: 'xmas',
                        url: rootPath + 'Content/sounds/Maenam.mp3',
                        autoLoad: true,
                        autoPlay: true,
                        stream: true,
                        volume: 75
                    });
                });
                Setup(rootPath + 'Content/sounds/techtyping.mp3');
                StopButton('xmas');
                $(document).snowfall({ flakeIndex: 9000, minSize: 1, maxSize: 5, round: true, flakeCount: 100 });
            </text>
        }
        else
        {
            @:Setup(rootPath + 'Content/sounds/techtyping.mp3');
        }
    });

    function StopButton(soundName) {
        $('<button><i class="icon-stop"></i></button>')
        .addClass('btn')
        .css({
            position: 'fixed',
            right: 20,
            top: 20,
            cursor: 'pointer',
            zIndex: 9000,
            opacity: '.50'
        })
        .prependTo('body')
        .click(function (e) {
            soundManager.pause(soundName);
            $(this).hide();
            PlayButton(soundName);
        });
    }

    function PlayButton(soundName) {
        $('<button><i class="icon-play"></i></button>')
        .addClass('btn')
        .css({
            position: 'fixed',
            right: 20,
            top: 20,
            cursor: 'pointer',
            zIndex: 9000,
            opacity: '.50'
        }).prependTo('body')
        .click(function (e) {
            soundManager.resume(soundName);
            $(this).hide();
            StopButton(soundName);
        });
    }

    function Setup(soundFile) {
        $.coolType.setup({
            soundFile: soundFile,
            playSound: true,
            speed: 25,
            onSoundLoaded: function () {
                $('#commandForm').terminalClient(
                {
                    elementToScroll: document,
                    apiUrl: '@Url.Action("Index", "Api")',
                    loggedinCallback: function (username) {
                        $(document).trigger('userLoggedIn');
                    },
                    loggedoutCallback: function () {
                        $(document).trigger('userLoggedOut');
                    }
                });
            }
        });
    }
</script>
<img class="backgroundImage" src="@Url.Content("~/content/omega.jpg")">
<div id="frame">
    <div id="terminal">
        @using (Html.BeginForm("Index", "Terminal", FormMethod.Post, new { id = "commandForm" }))
        {
            <div>
                @Html.Serialize("CommandContext", Model.CommandContext)
                <div id="terminalDisplay">
                    <noscript>
                        @Html.Raw(Model.Display)
                    </noscript>
                </div>
                @Html.HiddenFor(x => x.Display)
                <div id="notifications">
                    <noscript>
                        @Html.Raw(Model.Notifications)
                    </noscript>
                </div>
                @Html.HiddenFor(x => x.Notifications)
                <div id="loading">
                </div>
                <span id="contextDisplay"><span id="context">
                    <noscript>@Model.ContextText</noscript>
                </span>&gt;&nbsp;</span>
                @if (Model.PasswordField)
                {
                    @Html.PasswordFor(x => x.Cli, new { autofocus = "autofocus", autocomplete = "off" })
                }
                else
                {
                    @Html.TextBoxFor(x => x.Cli, new { autofocus = "autofocus", autocomplete = "off" })
                }
            </div>
        }
    </div>
</div>
